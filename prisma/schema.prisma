// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationIds String[] @db.ObjectId
  conversations Conversations[] @relation(fields: [conversationIds],references: [id])

  seenMessageIds  String[] @db.ObjectId
  seenMessages Messages[] @relation("Seen",fields: [seenMessageIds],references: [id])

  accounts Account[]
  messages Messages[]
}

model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

// onDelte Cascade means that when a row is deleted from the parent table all the rows must also be deleted from the child table
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Conversations{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?

  messageIds String[] @db.ObjectId
  messages Messages[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds],references: [id])
}

model Messages{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen",fields: [seenIds],references: [id])

  conversationId String @db.ObjectId
  conversation Conversations @relation(fields: [conversationId],references: [id],onDelete: Cascade)

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId],references: [id], onDelete:Cascade)
}
